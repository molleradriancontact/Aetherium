/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated resources (projects, invitations, clients).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /projects/{projectId}: Stores project data.  Each project has a `userId` field indicating ownership, and can optionally have a `collaborators` array.
 * - /users/{userId}/invitations/{invitationId}: Stores invitations for a user.
 * - /users/{userId}/clients/{clientId}: Stores clients associated with a specific designer (user).
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Project listing is publicly available, but creation/modification/deletion is restricted to the project owner or collaborators.
 * - Users can only read/write their own invitations.
 * - Users can only read/write their own clients.
 * - Data schema is not strictly enforced. Validation is limited to authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - Projects store the `userId` of the owner. This avoids needing to query user profiles to determine project ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId} can read their own profile.
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (update) User with matching {userId} can update their profile.
     * @allow (delete) User with matching {userId} can delete their profile.
     * @deny (get, list) User trying to read a different user's profile.
     * @deny (create) User trying to create a profile with a mismatched ID.
     * @deny (update) User trying to update a different user's profile.
     * @deny (delete) User trying to delete a different user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId; //Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to list projects, but only the owner or collaborators can create, update, or delete.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read any project.
     * @allow (create) Only the project owner can create a project, and the ownerId must match their UID.
     * @allow (update) Only the project owner or a listed collaborator can update a project.
     * @allow (delete) Only the project owner can delete a project.
     * @deny (create) A non-owner attempting to create a project.
     * @deny (update) A non-owner or non-collaborator attempting to update a project.
     * @deny (delete) A non-owner attempting to delete a project.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isCollaborator(projectId) || isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows users to manage their own project invitations.
     * @path /users/{userId}/invitations/{invitationId}
     * @allow (get, list) User with matching {userId} can read their own invitations.
     * @allow (create) User with matching {userId} can create invitations for themselves.
     * @allow (update) User with matching {userId} can update their own invitations.
     * @allow (delete) User with matching {userId} can delete their own invitations.
     * @deny (get, list) User trying to read a different user's invitations.
     * @deny (create) User trying to create invitations for a mismatched ID.
     * @deny (update) User trying to update a different user's invitations.
     * @deny (delete) User trying to delete a different user's invitations.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invitations/{invitationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows designers to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list) User with matching {userId} can read their own clients.
     * @allow (create) User with matching {userId} can create clients for themselves.
     * @allow (update) User with matching {userId} can update their own clients.
     * @allow (delete) User with matching {userId} can delete their own clients.
     * @deny (get, list) User trying to read a different user's clients.
     * @deny (create) User trying to create clients for a mismatched ID.
     * @deny (update) User trying to update a different user's clients.
     * @deny (delete) User trying to delete a different user's clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.designerId == userId;
      allow update: if isOwner(userId) && resource.data.designerId == userId;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isCollaborator(projectId) {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.collaborators.hasAny([request.auth.uid]);
    }
  }
}