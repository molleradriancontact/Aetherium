/**
 * @fileoverview Firestore Security Rules for OS Architect application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access their own user data and projects.  It prioritizes security by
 * default, explicitly denying access unless specifically allowed. Data shape is not enforced,
 * but the relationships between users and their projects are validated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Each user document's ID
 *   must match the authenticated user's UID.
 * - /users/{userId}/projects/{projectId}: Stores project data, with each project
 *   belonging to a specific user. The `userId` field within the project must
 *   match the parent user document's ID, and the project ID must match the document ID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Users can only create, read, update, and delete projects that they own.
 * - Listing all users is disallowed.
 * - No data shape validation is performed.
 *
 * Denormalization for Authorization:
 * - Project documents contain a `userId` field, which is used to enforce
 *   ownership.  This avoids the need for complex queries or joins to
 *   determine project ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own user document with id 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their own user document.
     * @allow (update) - User with UID 'user_abc' can update their own user document.
     * @allow (delete) - User with UID 'user_abc' can delete their own user document.
     * @deny (create) - User with UID 'user_xyz' cannot create a user document with id 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read user document of 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update user document of 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete user document of 'user_abc'.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Enforces user-level access control for projects within a user's data tree.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with UID 'user_abc' can create a project with userId 'user_abc' and id 'project_123'.
     * @allow (get) - User with UID 'user_abc' can read a project with userId 'user_abc' and id 'project_123'.
     * @allow (update) - User with UID 'user_abc' can update a project with userId 'user_abc' and id 'project_123'.
     * @allow (delete) - User with UID 'user_abc' can delete a project with userId 'user_abc' and id 'project_123'.
     * @deny (create) - User with UID 'user_xyz' cannot create a project under 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a project under 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a project under 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a project under 'user_abc'.
     * @principle Enforces document ownership for all operations on project documents.
     */
    match /users/{userId}/projects/{projectId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == projectId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}