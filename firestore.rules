/**
 * @fileoverview Firestore Security Rules for OS Architect.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile data and the OS Architect projects they have created.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/projects/{projectId}: Stores OS Architect projects belonging to each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Users can only create, read, update, and delete OS Architect projects under their own user ID.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `ArchitectProject` entity requires the `userId` field for authorization.
 *   This field must match the parent `/users/{userId}` path to ensure proper ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user123", ... } } }
     * @allow (get) - User with ID 'user123' can read their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update) - User with ID 'user123' can update their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a profile for user 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource": { "data": { "id": "user123", ... } } }
     * @deny (get) - User with ID 'user456' cannot read the profile of user 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to OS Architect project documents within a user's profile.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with ID 'user123' can create a project under their profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "userId": "user123", ... } } }
     * @allow (get) - User with ID 'user123' can read a project under their profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update) - User with ID 'user123' can update a project under their profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (delete) - User with ID 'user123' can delete a project under their profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a project under user 'user123''s profile.
     *   Request: { "auth": { "uid": "user456" }, "resource": { "data": { "userId": "user123", ... } } }
     * @deny (get) - User with ID 'user456' cannot read a project under user 'user123''s profile.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Restricts project access to the owning user.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}