/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private projects
 *              nested under `/users/{userId}/projects/{projectId}`. Public projects stored
 *              in the top-level `/projects/{projectId}` collection are publicly readable,
 *              but only the owner can modify them. User profiles are also protected
 *              under the `/users/{userId}` path.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /projects/{projectId}: Stores public ArchitectProject data.  Publicly readable, owner-writeable.
 * - /users/{userId}/projects/{projectId}: Stores private ArchitectProject data, only accessible to the owning user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Public projects are readable by anyone, but only the owner can modify them.
 * - Private projects are only accessible to the owner.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `ArchitectProject` entity includes a `userId` field to denote the project owner.
 *   This is used to enforce ownership in both public and private project contexts, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   - auth.uid: 'user123'
     *   - resource.data.id: 'user123'
     * @allow (get) - User with ID 'user123' reads their profile.
     *   - auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' updates their profile.
     *   - auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their profile.
     *   - auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create profile for 'user123'.
     *   - auth.uid: 'user456'
     *   - resource.data.id: 'user123'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner() {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Manages public projects.
     * @path /projects/{projectId}
     * @allow (get) - Any user can read a public project.
     * @allow (list) - Any user can list public projects.
     * @allow (create) - User with ID 'user123' creates a public project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (update) - User with ID 'user123' updates their public project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their public project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a public project owned by 'user123'.
     *   - auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Public read, owner-only writes for public projects.
     */
    match /projects/{projectId} {
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Manages private user projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with ID 'user123' creates a private project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (get) - User with ID 'user123' reads their private project.
     *   - auth.uid: 'user123'
     * @allow (list) - User with ID 'user123' lists their private projects.
     *   - auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' updates their private project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their private project.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a private project owned by 'user123'.
     *   - auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Enforces document ownership for all operations on private projects.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner() {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn() && isOwner();
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner();
    }
  }
}